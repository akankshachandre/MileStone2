/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 17 17:46:58 GMT 2016
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.Stack;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Stack_ESTest extends Stack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      
      stack0.push("?t[");
      stack0.push("?t[");
      stack0.Pop();
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push((Object) null);
      stack0.Pop();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        stack0.Pop();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stack empty
         //
         assertThrownBy("tutorial.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      stack0.push("Stack exDeeded capac`ty!");
      // Undeclared exception!
      try { 
        stack0.push("Stack exDeeded capac`ty!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stack exceeded capacity!
         //
         assertThrownBy("tutorial.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      
      stack0.push("8yEo[zF_>)wjC]:eL+9");
      boolean boolean0 = stack0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push("8yEo[zF_>)wjC]:eL+9");
      assertFalse(stack0.isEmpty());
      
      stack0.Pop();
      boolean boolean0 = stack0.isEmpty();
      assertTrue(boolean0);
  }
}
